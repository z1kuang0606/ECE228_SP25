# -*- coding: utf-8 -*-
"""CNN_base.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ZOYhvOe8-KYwcOKKrnrNt8NmH1f30JRF
"""

import torch
import torch.nn as nn
import torch.nn.functional as F

class CNN_base(nn.Module):
    def __init__(self):
      # two conv layers followed by two linear layers
      super(CNN_base, self).__init__()
      self.conv1 = nn.Conv2d(3, 32, kernel_size=3, padding=1) # after this (32,32,32)
      self.pool1 = nn.MaxPool2d(kernel_size=2, stride=2) # after this (32,16,16)
      self.conv2 = nn.Conv2d(32, 32, kernel_size=3, padding=1) # after this (32,16,16)
      self.fla = nn.Flatten(start_dim=1, end_dim=-1) # after this (32*8*8,) skip the batched dimension
      self.fc1 = nn.Linear(32*8*8, 64)
      self.act1 = nn.ReLU()
      self.fc2 = nn.Linear(64, 1) # binary classification
      self.act2 = nn.Sigmoid()


    def forward(self, x):
      x = self.act1(self.conv1(x)) # (32,32,32)
      x = self.pool1(x) # (32,16,16)
      x = self.act1(self.conv2(x)) # (32,16,16)
      x = self.pool1(x) # (32,8,8)
      x = self.fla(x)
      x = self.act1(self.fc1(x))
      x = self.act2(self.fc2(x))
      return x

class CNN_adversarial(CNN_base):
  def __init__(self):
    super(CNN_adversarial, self).__init__()
    self.fc2 = nn.Linear(64, 2)
    self.act3 = nn.Softplus()

  def forward(self, x):
    x = self.act1(self.conv1(x)) # (32,32,32)
    x = self.pool1(x) # (32,16,16)
    x = self.act1(self.conv2(x)) # (32,16,16)
    x = self.pool1(x) # (32,8,8)
    x = self.fla(x)
    x = self.act1(self.fc1(x))
    x = self.fc2(x) # (32, 2)
    t1 = self.act2(x[:,0:1]) # mean (32,1)
    t2 = self.act3(x[:,1:2]) # variance (32,1)
    x = torch.cat((t1,t2), dim=1)
    return x