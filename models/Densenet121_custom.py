# -*- coding: utf-8 -*-
"""Densenset121_custom.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/10y6rAzyySQ6SPsJSzHEHYIVEiBHffLID
"""

import torch
import torch.nn as nn
import torch.nn.functional as F
from torchvision import models

class Densenet121_custom(nn.Module):
    def __init__(self, out_features=1):
        super(Densenet121_custom, self).__init__()
        # Using a pre-trained DenseNet-121
        self.densenet = models.densenet121(pretrained=True)
        self.densenet.features.conv0 = nn.Conv2d(3, 64, kernel_size=3, stride=1, padding=1, bias=False)
        # Adjust the classifier to match the number of classes
        self.densenet.classifier = nn.Linear(self.densenet.classifier.in_features, out_features)
        self.act = nn.Sigmoid()
    def forward(self, x):
        x = self.densenet(x)
        x = self.act(x)
        return x
        

class Densenet201_custom(Densenet121_custom):
  def __init__(self, out_features=1):
    super(Densenet201_custom, self).__init__(out_features=out_features)
    self.densenet = models.densenet201(pretrained=True)
    self.densenet.features.conv0 = nn.Conv2d(3, 64, kernel_size=3, stride=1, padding=1, bias=False)
    # Adjust the classifier to match the number of classes
    self.densenet.classifier = nn.Linear(self.densenet.classifier.in_features, out_features)


class Densenet121_custom_adversarial(Densenet121_custom):
  def __init__(self, out_features=2):
    super(Densenet121_custom_adversarial, self).__init__(out_features=out_features)
    self.act2 = nn.Softplus()

  def forward(self, x):
    x = self.densenet(x) # (batch_size, 2)
    t1 = self.act(x[:,0:1]) # mean (batch_size, 1)
    t2 = self.act2(x[:,1:2]) # mean (batch_size, 1)
    x = torch.cat((t1,t2),dim=1)

    return x