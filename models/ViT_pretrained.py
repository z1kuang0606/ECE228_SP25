# -*- coding: utf-8 -*-
"""ViT_pretrained.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1oWee29iJueaoxoWhmgaEvwf8mt53PfXc
"""

import torch.nn as nn
import torch
import torch.nn.functional as F
import torchvision.transforms as transforms
from transformers import ViTImageProcessor, ViTForImageClassification

class ViT_pretrained(nn.Module):
  def __init__(self, out_features=1):
    super(ViT_pretrained, self).__init__()
    self.vit = ViTForImageClassification.from_pretrained('google/vit-base-patch16-224')
    self.processor = ViTImageProcessor.from_pretrained('google/vit-base-patch16-224')
    self.classifier = nn.Linear(self.vit.classifier.out_features, out_features)
    self.act = nn.Sigmoid()

  def forward(self, x):
    # shape of x: (batch_size, C, H, W) in [0,1)
    t_x = self.processor(images=x, return_tensors="pt", do_rescale=False) # 'pixel values':Tensor (batch_size, C, 224, 224)
    t_x['pixel_values'] = t_x['pixel_values'].to(x.device)
    x = self.vit(**t_x).logits
    x = self.classifier(x)
    x = self.act(x)
    return x
    
class ViT_pretrained_adversarial(ViT_pretrained):
  def __init__(self, out_features=2):
    super(ViT_pretrained_adversarial, self).__init__(out_features)
    self.act2 = nn.Softplus()

  def forward(self, x):
    # shape of x: (batch_size, C, 224, 224) in [0,1)
    #t_x = self.processor(images=x, return_tensors="pt", do_rescale=False) # 'pixel values':Tensor (batch_size, C, 224, 224
    #t_x['pixel_values'] = t_x['pixel_values'].to(x.device)
    x = self.vit(pixel_values=x).logits
    x = self.classifier(x) # (batch_size, 2)
    t1 = self.act(x[:,0:1]) # mean (batch_size, 1)
    t2 = self.act2(x[:,1:2]) # variance (batch_size, 1)
    x = torch.cat((t1,t2), dim=1)
    return x