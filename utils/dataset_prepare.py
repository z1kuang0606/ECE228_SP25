# -*- coding: utf-8 -*-
"""dataset_prepare.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1uI8yqkze4E0l3aspoFKvSF4_tjtl_GQf
"""

import os
import torch
import torch.nn as nn
from torch.utils.data import Dataset
from torchvision import transforms, models
from PIL import Image
import pandas as pd
import numpy as np

def create_dataframe(root_dir, split='train'):
    real_dir = os.path.join(root_dir, split, 'real')
    fake_dir = os.path.join(root_dir, split, 'fake')

    real_images = [{'image_path': os.path.join(split, 'real', f), 'label': 1} for f in os.listdir(real_dir)]
    fake_images = [{'image_path': os.path.join(split, 'fake', f), 'label': 0} for f in os.listdir(fake_dir)]

    return pd.DataFrame(real_images + fake_images)

class FaceDataset(Dataset):
    def __init__(self, dataframe, root_dir, transform=None):
        self.dataframe = dataframe
        self.root_dir = root_dir
        self.transform = transform

    def __len__(self):
        return len(self.dataframe)

    def __getitem__(self, idx):
        img_path = os.path.join(self.root_dir, self.dataframe.iloc[idx]['image_path'])
        image = Image.open(img_path).convert('RGB')
        label = self.dataframe.iloc[idx]['label']

        if self.transform:
            image = self.transform(image)
        else:
            transform = transforms.Compose([
              transforms.ToTensor()
            ])
            image = transform(image)
        label = torch.tensor(label).float()
        return {'image':image,'label':label}